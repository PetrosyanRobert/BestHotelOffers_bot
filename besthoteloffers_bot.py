"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ besthoteloffers_bot.py
–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
"""

import telebot
from telebot.types import Message, CallbackQuery
from loguru import logger

import bot_db
from config import BOT_TOKEN
# import requests
from commands import highprice, lowprice, bestdeal, history

logger.add('Log/debug.log', encoding='utf-8')

# req = requests.get('', timeout=(1, 3))

bot = telebot.TeleBot(BOT_TOKEN)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API
bot_info = bot.get_me()
logger.info((f"""
    ID –±–æ—Ç–∞: {bot_info.id}, 
    –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: {bot_info.first_name}, 
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bot_info.username}, 
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {bot_info.is_bot}"""))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
bot_db.init_db()


@bot.message_handler(commands=['start'])
@logger.catch
def command_start(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start, –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Args:
        message (Message): –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
    """

    send_message_first_start = (f"""
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é  {message.from_user.first_name} {message.from_user.last_name}!

–Ø - Best Hotel Offers Bot.</b>
–Ø —É–º–µ—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –º–∏—Ä–∞,
–≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ, –ø–æ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.

–ú–µ–Ω—è –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç, –Ω–æ —è –∫–æ–µ-—á—Ç–æ —É–º–µ—é.
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç".""")

    send_message_next_starts = (f"""
<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º  {message.from_user.first_name} {message.from_user.last_name}!</b>

–ü–æ—Ö–æ–∂–µ, —Ç—ã —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?
–ß—Ç–æ –∂, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç".""")

    if not bot_db.user_exists(message.from_user.id):
        bot_db.add_user(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            date=message.date
        )
        bot.send_message(message.from_user.id, send_message_first_start, parse_mode='html')
    else:
        bot.send_message(message.from_user.id, send_message_next_starts, parse_mode='html')

    bot_db.add_message(
        user_id=message.from_user.id,
        command=message.text,
        date=message.date
    )


@bot.message_handler(commands=['help'])
@logger.catch
def command_help(message: Message) -> None:
    bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
    # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é


@bot.message_handler(commands=['reset'])
@logger.catch
def command_reset(message: Message) -> None:
    bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
    # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é


@bot.message_handler(commands=['settings'])
@logger.catch
def command_settings(message: Message) -> None:
    bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
    # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal', 'history'])
@logger.catch
def search_commands(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /lowprice, /highprice, /bestdeal, /history

    Args:
        message (Message): –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
    """

    match message.text:
        case '/lowprice':
            # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
        case '/highprice':
            # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
        case '/bestdeal':
            # TODO –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
        case '/history':
            history.req_period(bot=bot, message=message)
            bot_db.add_message(
                user_id=message.from_user.id,
                message=message.text,
                date=message.date
            )


@bot.message_handler(content_types=['text'])
@logger.catch
def get_text_messages(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è get_text_message, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
    """

    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! üëã\n–ü–æ–∫–∞ —è —É–º–µ—é —Å—Ç–æ–ª—å–∫–æ. –ù–æ –º–µ–Ω—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∫–æ–¥–∏—Ç—å. üòâ')
    else:
        bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. ü§∑\n–ù–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç".')

    bot_db.add_message(
        user_id=message.from_user.id,
        message=message.text,
        date=message.date
    )


@bot.callback_query_handler(func=lambda call: True)
@logger.catch
def callback_query(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    Args:
        call (CallbackQuery): –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç-CallbackQuery –æ—Ç Telegram
    """
    match call.data:
        case 'history_day' | 'history_week' | 'history_month' | 'history_all':
            history.get_history(bot=bot, call=call)


logger.info('–ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ')
bot.infinity_polling()
